# Generated by Django 2.2 on 2019-06-07 23:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('words', '0008_auto_20190606_1524'),
    ]

    operations = [
        migrations.CreateModel(
            name='TRG',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_trg_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trg_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SYN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_syn_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='syn_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SPC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_spc_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spc_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RHY',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_rhy_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rhy_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PAR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_par_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='par_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NRY',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_nry_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nry_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JJB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_jjb_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jjb_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JJA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_jja_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jja_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HOM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_hom_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hom_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GEN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_gen_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gen_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='COM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_com_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='com_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CNS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_cns_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cns_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BGB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_bgb_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bgb_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BGA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_bga_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bga_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ANT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('related_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='linked_ant_relations', to='words.Word')),
                ('source_word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ant_relations', to='words.Word')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='word',
            name='ant',
            field=models.ManyToManyField(blank=True, related_name='related_by_ant', through='words.ANT', to='words.Word', verbose_name='antonyms'),
        ),
        migrations.AddField(
            model_name='word',
            name='bga',
            field=models.ManyToManyField(blank=True, help_text='words that frequently follow this (i.e. havoc follows wreak', related_name='related_by_bga', through='words.BGA', to='words.Word', verbose_name='frequent followers'),
        ),
        migrations.AddField(
            model_name='word',
            name='bgb',
            field=models.ManyToManyField(blank=True, help_text='words that frequently precede this(i.e. wreck precedes havoc', related_name='related_by_bgb', through='words.BGB', to='words.Word', verbose_name='frequent predecessors'),
        ),
        migrations.AddField(
            model_name='word',
            name='cns',
            field=models.ManyToManyField(blank=True, help_text='i.e. sample and simple', related_name='related_by_cns', through='words.CNS', to='words.Word', verbose_name='consonant matches'),
        ),
        migrations.AddField(
            model_name='word',
            name='com',
            field=models.ManyToManyField(blank=True, help_text='things which this is composed of(a car has an accelerator, a steering wheel, etc.', related_name='related_by_com', through='words.COM', to='words.Word', verbose_name='comprises'),
        ),
        migrations.AddField(
            model_name='word',
            name='gen',
            field=models.ManyToManyField(blank=True, help_text='words with a similar, but more specific meaning (i.e. gondola is a hyponym of boat)', related_name='related_by_gen', through='words.GEN', to='words.Word', verbose_name='direct hyponyms'),
        ),
        migrations.AddField(
            model_name='word',
            name='hom',
            field=models.ManyToManyField(blank=True, help_text='sound-alike words', related_name='related_by_hom', through='words.HOM', to='words.Word', verbose_name='homophones'),
        ),
        migrations.AddField(
            model_name='word',
            name='jja',
            field=models.ManyToManyField(blank=True, related_name='related_by_jja', through='words.JJA', to='words.Word', verbose_name='popular related nouns'),
        ),
        migrations.AddField(
            model_name='word',
            name='jjb',
            field=models.ManyToManyField(blank=True, related_name='related_by_jjb', through='words.JJB', to='words.Word', verbose_name='popular related adjectives'),
        ),
        migrations.AddField(
            model_name='word',
            name='nry',
            field=models.ManyToManyField(blank=True, help_text='approximate rhymes', related_name='related_by_nry', through='words.NRY', to='words.Word', verbose_name='near rhymes'),
        ),
        migrations.AddField(
            model_name='word',
            name='par',
            field=models.ManyToManyField(blank=True, help_text='things of which this is a part of(a window is a part of a car, a house, a boat, etc.)', related_name='related_by_par', through='words.PAR', to='words.Word', verbose_name='part of'),
        ),
        migrations.AddField(
            model_name='word',
            name='rhy',
            field=models.ManyToManyField(blank=True, help_text='perfect rhymes', related_name='related_by_rhy', through='words.RHY', to='words.Word', verbose_name='rhymes'),
        ),
        migrations.AddField(
            model_name='word',
            name='spc',
            field=models.ManyToManyField(blank=True, help_text='words with a similar, but broader meaning (i.e. boat is a hypernym of gondola)', related_name='related_by_spc', through='words.SPC', to='words.Word', verbose_name='direct hypernyms'),
        ),
        migrations.AddField(
            model_name='word',
            name='syn',
            field=models.ManyToManyField(blank=True, related_name='related_by_syn', through='words.SYN', to='words.Word', verbose_name='synonyms'),
        ),
        migrations.AddField(
            model_name='word',
            name='trg',
            field=models.ManyToManyField(blank=True, help_text='words that are statistically associated with this word in the same piece of text', related_name='related_by_trg', through='words.TRG', to='words.Word', verbose_name='triggers'),
        ),
    ]
